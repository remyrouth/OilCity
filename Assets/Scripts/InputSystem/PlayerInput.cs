//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""4fbc5626-2e15-4b75-b38f-90cc4b58c40f"",
            ""actions"": [
                {
                    ""name"": ""ClickSelect"",
                    ""type"": ""Button"",
                    ""id"": ""b834963c-8930-4e73-bf5e-ef96a0b0376c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickDeselect"",
                    ""type"": ""Button"",
                    ""id"": ""d775f156-ffe2-4bf5-857a-2677442235d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCursor"",
                    ""type"": ""Value"",
                    ""id"": ""9a19ddfc-15a9-4413-abeb-59c0a60c5821"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveLeftStick"",
                    ""type"": ""Button"",
                    ""id"": ""840520f3-63e7-4bac-b99d-3262c84cb324"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftStickHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""f0a74434-6e86-43eb-93be-b45a3832b817"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveLeftStickVertical"",
                    ""type"": ""Value"",
                    ""id"": ""2ccccd78-4b00-41f3-a564-51f3dc175ff4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""881abfc7-7af5-47cd-ab39-5c2282b39f6e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22b15873-90f3-46a0-93eb-b9bcdd5c4420"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27008919-ae20-4151-a886-b52a67a1b68d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6eb99e95-e474-483f-b644-14e6de7a12db"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dff6e8c-8cd7-45b3-904e-66ace0c4b5eb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d38a1bf-95b6-4efb-a36b-f02619487ca2"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftStickHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9e64442-0add-402d-b15a-91185d51c43e"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftStickVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95acd9d4-24bf-4f48-83f8-d4c7e5c74754"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickDeselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_ClickSelect = m_PlayerControls.FindAction("ClickSelect", throwIfNotFound: true);
        m_PlayerControls_ClickDeselect = m_PlayerControls.FindAction("ClickDeselect", throwIfNotFound: true);
        m_PlayerControls_MoveCursor = m_PlayerControls.FindAction("MoveCursor", throwIfNotFound: true);
        m_PlayerControls_MoveLeftStick = m_PlayerControls.FindAction("MoveLeftStick", throwIfNotFound: true);
        m_PlayerControls_MoveLeftStickHorizontal = m_PlayerControls.FindAction("MoveLeftStickHorizontal", throwIfNotFound: true);
        m_PlayerControls_MoveLeftStickVertical = m_PlayerControls.FindAction("MoveLeftStickVertical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
    private readonly InputAction m_PlayerControls_ClickSelect;
    private readonly InputAction m_PlayerControls_ClickDeselect;
    private readonly InputAction m_PlayerControls_MoveCursor;
    private readonly InputAction m_PlayerControls_MoveLeftStick;
    private readonly InputAction m_PlayerControls_MoveLeftStickHorizontal;
    private readonly InputAction m_PlayerControls_MoveLeftStickVertical;
    public struct PlayerControlsActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickSelect => m_Wrapper.m_PlayerControls_ClickSelect;
        public InputAction @ClickDeselect => m_Wrapper.m_PlayerControls_ClickDeselect;
        public InputAction @MoveCursor => m_Wrapper.m_PlayerControls_MoveCursor;
        public InputAction @MoveLeftStick => m_Wrapper.m_PlayerControls_MoveLeftStick;
        public InputAction @MoveLeftStickHorizontal => m_Wrapper.m_PlayerControls_MoveLeftStickHorizontal;
        public InputAction @MoveLeftStickVertical => m_Wrapper.m_PlayerControls_MoveLeftStickVertical;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
            @ClickSelect.started += instance.OnClickSelect;
            @ClickSelect.performed += instance.OnClickSelect;
            @ClickSelect.canceled += instance.OnClickSelect;
            @ClickDeselect.started += instance.OnClickDeselect;
            @ClickDeselect.performed += instance.OnClickDeselect;
            @ClickDeselect.canceled += instance.OnClickDeselect;
            @MoveCursor.started += instance.OnMoveCursor;
            @MoveCursor.performed += instance.OnMoveCursor;
            @MoveCursor.canceled += instance.OnMoveCursor;
            @MoveLeftStick.started += instance.OnMoveLeftStick;
            @MoveLeftStick.performed += instance.OnMoveLeftStick;
            @MoveLeftStick.canceled += instance.OnMoveLeftStick;
            @MoveLeftStickHorizontal.started += instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickHorizontal.performed += instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickHorizontal.canceled += instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickVertical.started += instance.OnMoveLeftStickVertical;
            @MoveLeftStickVertical.performed += instance.OnMoveLeftStickVertical;
            @MoveLeftStickVertical.canceled += instance.OnMoveLeftStickVertical;
        }

        private void UnregisterCallbacks(IPlayerControlsActions instance)
        {
            @ClickSelect.started -= instance.OnClickSelect;
            @ClickSelect.performed -= instance.OnClickSelect;
            @ClickSelect.canceled -= instance.OnClickSelect;
            @ClickDeselect.started -= instance.OnClickDeselect;
            @ClickDeselect.performed -= instance.OnClickDeselect;
            @ClickDeselect.canceled -= instance.OnClickDeselect;
            @MoveCursor.started -= instance.OnMoveCursor;
            @MoveCursor.performed -= instance.OnMoveCursor;
            @MoveCursor.canceled -= instance.OnMoveCursor;
            @MoveLeftStick.started -= instance.OnMoveLeftStick;
            @MoveLeftStick.performed -= instance.OnMoveLeftStick;
            @MoveLeftStick.canceled -= instance.OnMoveLeftStick;
            @MoveLeftStickHorizontal.started -= instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickHorizontal.performed -= instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickHorizontal.canceled -= instance.OnMoveLeftStickHorizontal;
            @MoveLeftStickVertical.started -= instance.OnMoveLeftStickVertical;
            @MoveLeftStickVertical.performed -= instance.OnMoveLeftStickVertical;
            @MoveLeftStickVertical.canceled -= instance.OnMoveLeftStickVertical;
        }

        public void RemoveCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnClickSelect(InputAction.CallbackContext context);
        void OnClickDeselect(InputAction.CallbackContext context);
        void OnMoveCursor(InputAction.CallbackContext context);
        void OnMoveLeftStick(InputAction.CallbackContext context);
        void OnMoveLeftStickHorizontal(InputAction.CallbackContext context);
        void OnMoveLeftStickVertical(InputAction.CallbackContext context);
    }
}
